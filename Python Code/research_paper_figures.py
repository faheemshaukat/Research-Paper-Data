# -*- coding: utf-8 -*-
"""Research Paper Figures.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AUXPfM7X8QKn6pi1acxN0gcjsP2ueTCK
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
#viridis_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))  # Adjust the figure size

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[0]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Action'], color=action_color, alpha=0.8, zorder=10)

plt.xticks(rotation=45)
plt.xlabel('Timestemp')
plt.ylabel('Count')
plt.title('Stacked Area Chart with Action Bar - Genre Counts Over Time')

# Adding the legend back
plt.legend(title='Genre')

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
# viridis_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))  # Adjust the figure size

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[0]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Action'], color=action_color, alpha=0.8, zorder=10)

plt.xticks(rotation=45)
plt.xlabel('Timestemp')
plt.ylabel('Count')
plt.title('Stacked Area Chart with Action Bar - Genre Counts Over Time')

# Remove background grid lines
plt.grid(False)

# Hide the legend
plt.legend().set_visible(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[2]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Remove x label, y label, y axis, and legend
#plt.xticks([])
plt.xticks(rotation=45)
plt.yticks([])
plt.xlabel('')
plt.ylabel('')
plt.legend().set_visible(False)

# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
#ax.spines['bottom'].set_visible(False)

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.show()



import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12), sharex=True)

# Manually specified "viridis" colors
#viridis_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Stacked area chart with markers using "viridis" colors
for i, genre in enumerate(df_long['Genre'].unique()):
    #if genre != 'Romance':
    sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == genre], color=viridis_colors[i], marker='o', linewidth=2.5, ax=ax1)

#sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=viridis_colors[2], marker='o', linewidth=2.5, ax=ax1)

ax1.set_ylim(0, 100)  # Set y-axis range
ax1.set_ylabel('Count')
ax1.set_title('Stacked Area Chart - Genre Counts Over Time')

# Bar chart for "Action" using "viridis" colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Action'], color=viridis_colors[0], alpha=0.8, ax=ax2)
ax2.set_ylim(0, 100)  # Set y-axis range
ax2.set_ylabel('Count')
ax2.set_title('Bar Chart for Action')

plt.xticks(rotation=45)
plt.xlabel('Timestemp')

# Adding the legend back
ax1.legend(df_long['Genre'].unique(), title='Genre')

# Remove background grid lines
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)"
    ],
    'Action': [5],
    'Adventure': [5],
    'Romance': [45],
    'Fantasy': [30],
    'Family': [5],
    'Horror': [10]
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

# Set the same color combination as in the 'viridis' palette
#colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']
colors = ["red", "green", "pink", "blue", "yellow", "black"]
# Set the style to whitegrid
sns.set(style="whitegrid")
plt.figure(figsize=(8, 8))

# Create the pie chart with labels and percentage values
wedges, texts, autotexts = plt.pie(df.iloc[0], labels=[f'{label}\n{val}%' for label, val in zip(df.columns, df.iloc[0])], colors=colors, startangle=140, autopct='', wedgeprops=dict(width=0.4))
plt.axis('equal')

# Adjust layout to prevent title from crossing inner circle and center the title
plt.title("")  # Clear the title to make space for the movie title
plt.text(0, 0, df.index[0], ha='center', va='center', fontsize=12, color='black')  # Adjust fontsize

# Set the position of the title to be more centered
plt.gcf().subplots_adjust(top=0.9)  # Adjust top margin

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Set the title and labels
plt.title("Genre Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Show the legend with custom colors and labels outside the plot
plt.legend(title="Genres", labels=df.columns, loc="upper left", bbox_to_anchor=(1, 1))

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set 'Movie No.' column as the index
df.set_index('Timestamp', inplace=True)

# Calculate percentage values for each genre within each movie
total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Create a horizontal stacked bar chart
plt.figure(figsize=(10, 6))
sns.set(style="white")

# Use Seaborn's barplot function with stacked=True
ax = df_percentage.plot(kind='barh', stacked=True, cmap='viridis')

# Set the title and labels
plt.title("Genre Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Remove the top and right spines (axes lines)
sns.despine()

# Customize legend
handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set 'Movie No.' column as the index
df.set_index('Timestamp', inplace=True)

# Calculate percentage values for each genre within each movie
total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Create a horizontal stacked bar chart
plt.figure(figsize=(10, 6))
sns.set(style="white")

# Use Seaborn's barplot function with stacked=True and custom colors
colors = ["pink","red", "green", "blue", "yellow", "black"]
ax = df_percentage.plot(kind='barh', stacked=True, color=colors)

# Set the title and labels
plt.title("Genre Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Remove the top and right spines (axes lines)
sns.despine()

# Customize legend
handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

plt.show()

import numpy as np

# Define the desired column values
column_values = [5, 5, 45, 30, 5, 10]

# Calculate the total percentage value
total_percentage = sum(column_values)

# Generate random values for an 8x6 matrix while respecting the column percentages and row-wise sum
matrix = np.zeros((8, 6), dtype=int)
for col in range(6):
    # Calculate the maximum value for this column based on the percentage
    max_value = (column_values[col] / total_percentage) * 100

    # Generate random values for this column
    col_values = np.random.randint(0, max_value + 1, size=8)

    # Adjust values to ensure row-wise sum is equal to 100
    total_col = sum(col_values)
    if total_col != 0:
        col_values = (col_values * 100 // total_col)

    # Update the matrix
    matrix[:, col] = col_values

# Print the generated matrix
print(matrix)

import numpy as np

# Define the desired column values
column_values = [5, 5, 45, 30, 5, 10]

# Calculate the total percentage value
total_percentage = sum(column_values)

# Generate random values for an 8x6 matrix while respecting the column percentages and row-wise sum
matrix = np.zeros((8, 6), dtype=int)
for col in range(6):
    # Calculate the maximum value for this column based on the percentage
    max_value = (column_values[col] / total_percentage) * 100

    # Generate random values for this column
    col_values = np.random.randint(0, max_value + 1, size=8)

    # Adjust values to ensure row-wise sum is equal to 100
    total_col = sum(col_values)
    if total_col != 0:
        col_values = (col_values * 100 // total_col)

    # Update the matrix
    matrix[:, col] = col_values

# Check and adjust row-wise sum to be 100
for row in range(8):
    row_sum = sum(matrix[row])
    if row_sum != 100:
        diff = 100 - row_sum
        non_zero_cols = np.nonzero(matrix[row])
        col_to_adjust = np.random.choice(non_zero_cols[0])
        matrix[row, col_to_adjust] += diff

# Print the generated matrix
print(matrix)

import numpy as np
import pandas as pd

# Define the desired column values and the overall maximum value for each column
column_values = [5, 5, 45, 30, 5, 10]

# Calculate the total value and percentage for each column
total_value = sum(column_values)
column_percentages = [value / total_value for value in column_values]

# Generate random values that follow the desired column percentages
matrix = np.zeros((8, 6), dtype=int)
for col in range(6):
    col_value = int(column_percentages[col] * 100)
    values = np.random.randint(1, col_value + 1, size=8)
    matrix[:, col] = values

# Adjust values to ensure row-wise sum is equal to 100
for row in range(8):
    row_sum = sum(matrix[row])
    if row_sum != 100:
        diff = 100 - row_sum
        non_zero_cols = np.nonzero(matrix[row])
        col_to_adjust = np.random.choice(non_zero_cols[0])
        matrix[row, col_to_adjust] += diff

# Convert the matrix to a DataFrame
df = pd.DataFrame(matrix, columns=["Column 1", "Column 2", "Column 3", "Column 4", "Column 5", "Column 6"])

# Save the DataFrame as an Excel file
df.to_excel("generated_matrix.xlsx", index=False)





import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a list of dictionaries for each movie's data
movie_data = [
    {
        'Movie': "The Twilight Saga: Eclipse (2010)",
        'Action': 5,
        'Adventure': 5,
        'Romance': 45,
        'Fantasy': 30,
        'Family': 5,
        'Horror': 10
    },
    {
        'Movie': "I Am Number Four (2011)",
        'Action': 30,
        'Adventure': 35,
        'Romance': 10,
        'Fantasy': 20,
        'Family': 5,
        'Horror': 0
    },
    {
        'Movie': "Snow White and the Huntsman (2012)",
        'Action': 25,
        'Adventure': 20,
        'Romance': 15,
        'Fantasy': 30,
        'Family': 5,
        'Horror': 5
    },
    {
        'Movie': "Hansel & Gretel: Frame@1:40",
        'Action': 25,
        'Adventure': 25,
        'Romance': 5,
        'Fantasy': 20,
        'Family': 5,
        'Horror': 20
    },
    {
        'Movie': "Dracula Untold (2014)",
        'Action': 20,
        'Adventure': 20,
        'Romance': 15,
        'Fantasy': 20,
        'Family': 5,
        'Horror': 20
    }
]

# Loop through each movie's data and create a pie chart
for data in movie_data:
    df = pd.DataFrame([data])  # Create a DataFrame with a list containing the dictionary
    df.set_index('Movie', inplace=True)

    colors = ["red", "green", "pink", "blue", "yellow", "black"]
    sns.set(style="whitegrid")
    plt.figure(figsize=(8, 8))

    wedges, texts, autotexts = plt.pie(df.iloc[0], labels=[f'{label}\n{val}%' for label, val in zip(df.columns, df.iloc[0])], colors=colors, startangle=140, autopct='', wedgeprops=dict(width=0.4))
    plt.axis('equal')

    plt.title("")
    plt.text(0, 0, df.index[0], ha='center', va='center', fontsize=12, color='black')
    plt.gcf().subplots_adjust(top=0.9)

    plt.show()



!pip install pygal

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12), sharex=True)

# Stacked area chart with markers
sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] != 'Romance'], hue='Genre', palette='tab20', marker='o', linewidth=2.5, ax=ax1)
ax1.set_ylim(0, 100)  # Set y-axis range
ax1.set_ylabel('Count')
ax1.set_title('Stacked Area Chart - Genre Counts Over Time')

# Bar chart for "Romance"
romance_color = sns.color_palette("tab20")[2]  # Get a different color for Romance
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=romance_color, alpha=0.7, ax=ax2)
ax2.set_ylim(0, 100)  # Set y-axis range
ax2.set_ylabel('Count')
ax2.set_title('Bar Chart for Romance')

plt.xticks(rotation=45)
plt.xlabel('Timestemp')

# Adding the legend back
ax1.legend(title='Genre')

# Remove background grid lines
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Romance': [45, 10, 15, 5, 15],
    'Fantasy': [30, 20, 30, 20, 20],
    'Family': [5, 5, 5, 5, 5],
    'Horror': [10, 0, 5, 20, 20]
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Define custom colors for each genre
genre_colors = ['red', 'green', 'pink', 'blue', 'yellow', 'black']

# Create a horizontal stacked bar chart
plt.figure(figsize=(10, 6))
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

ax = df_percentage.plot(kind='barh', stacked=True)

plt.title('Stacked Bar Chart of Movie Genres')
plt.xlabel('Percentage')
plt.ylabel('Movies')

sns.despine()

handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Romance': [45, 10, 15, 5, 15],
    'Fantasy': [30, 20, 30, 20, 20],
    'Family': [5, 5, 5, 5, 5],
    'Horror': [10, 0, 5, 20, 20]
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Sort the DataFrame by the "Action" column
df_percentage_sorted = df_percentage.sort_values(by='Action', ascending=False)

# Define custom colors for each genre
genre_colors = ['red', 'green', 'pink', 'blue', 'yellow', 'black']

# Create a horizontal stacked bar chart
plt.figure(figsize=(10, 6),dpi=600)
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

ax = df_percentage_sorted.plot(kind='barh', stacked=True)

plt.title('Stacked Bar Chart of 5 Movies Genres (Sorted by Action)')
plt.xlabel('Percentage')
plt.ylabel('Movies')

sns.despine()

handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Romance': [45, 10, 15, 5, 15],
    'Fantasy': [30, 20, 30, 20, 20],
    'Family': [5, 5, 5, 5, 5],
    'Horror': [10, 0, 5, 20, 20]
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

# Find the maximum value's genre for each movie
max_genre = df.idxmax(axis=1)

# Create a new DataFrame containing only the maximum genre values
df_max_genre = pd.DataFrame(index=df.index)
for genre in df.columns:
    df_max_genre[genre] = df[genre].where(max_genre == genre, 0)

# Create the bar plot
plt.figure(figsize=(10, 6))
sns.set(style="white")
sns.set_palette(['red', 'green', 'pink', 'blue', 'yellow', 'black'])

ax = df_max_genre.plot(kind='barh', stacked=True)

plt.title('Highest Genre Bar Chart')
plt.xlabel('Percentage')
plt.ylabel('Movies')
plt.xlim(0, 100)  # Set x-axis limits from 0 to 100

sns.despine()

handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

# Mark 100 on the x-axis
plt.axvline(x=100, color='gray', linestyle='--', linewidth=0.8)

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = {
    'Genre': ['Action', 'Adventure', 'Romance', 'Fantasy', 'Family', 'Horror'],
    'Percentage': [25, 25, 5, 20, 5, 20]
}

df = pd.DataFrame(data)

# Create a dictionary to map genres to colors
genre_colors = {
    'Action': 'red',
    'Adventure': 'green',
    'Romance': 'pink',
    'Fantasy': 'blue',
    'Family': 'yellow',
    'Horror': 'black'
}

# Map the colors to the genres in the DataFrame
df['Color'] = df['Genre'].map(genre_colors)

# Create the bar plot
plt.figure(figsize=(8, 4))
sns.set(style="white")

ax = sns.barplot(x='Genre', y='Percentage', data=df, palette=df['Color'])

plt.title('Genre Distribution for Movie')
plt.xlabel('Genre')
plt.ylabel('Percentage')

plt.ylim(0, 100)  # Set y-axis limits from 0 to 100

sns.despine()

# Mark 100 on the y-axis
plt.axhline(y=100, color='gray', linestyle='--', linewidth=0.8)

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Romance': [45, 10, 15, 5, 15],
    'Fantasy': [30, 20, 30, 20, 20],
    'Family': [5, 5, 5, 5, 5],
    'Horror': [10, 0, 5, 20, 20]
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Sort the DataFrame by the "Action" column
df_percentage_sorted = df_percentage.sort_values(by='Action', ascending=False)

# Define custom colors for each genre
genre_colors = ['red', 'green', 'pink', 'blue', 'yellow', 'black']

# Create a horizontal stacked bar chart with improved dpi
plt.figure(figsize=(10, 6), dpi=300)  # Increase dpi value for higher resolution
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

ax = df_percentage_sorted.plot(kind='barh', stacked=True)

plt.title('Stacked Bar Chart of 5 Movies Genres (Sorted by Action)')
plt.xlabel('Percentage')
plt.ylabel('Movies')

sns.despine()

handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Sample genre data (replace with your actual data)
genres = ['Action', 'Comedy', 'Drama', 'Sci-Fi', 'Fantasy', 'Thriller']
genre_counts = [120, 80, 90, 60, 70, 50]

# Choose a Seaborn color palette
sns.set_palette("Set2")

# Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genres, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Sample genre data (replace with your actual data)
genres = ['Action', 'Comedy', 'Drama', 'Sci-Fi', 'Fantasy', 'Thriller']
genre_counts = [120, 80, 90, 60, 70, 50]

# Example 1: Using the "Set1" color palette
sns.set_palette("Set1")
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genres, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres (Set1)')
plt.axis('equal')
plt.show()

# Example 2: Using the "Pastel1" color palette
sns.set_palette("Pastel1")
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genres, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres (Pastel1)')
plt.axis('equal')
plt.show()

# Example 3: Using the "Dark2" color palette
sns.set_palette("Dark2")
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genres, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres (Dark2)')
plt.axis('equal')
plt.show()

# Example 4: Using the "tab20" color palette
sns.set_palette("tab20")
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genres, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres (tab20)')
plt.axis('equal')
plt.show()

# Example 5: Using a custom color palette
custom_palette = ['gold', 'mediumseagreen', 'steelblue', 'tomato', 'purple', 'slategray']
sns.set_palette(custom_palette)
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genres, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Movie Genres (Custom Palette)')
plt.axis('equal')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12), sharex=True)

# Manually specified "viridis" colors
viridis_colors = ['#FF3333','#4CAF50','#FF80AB','#9370DB','#9370DB','#666666']

# Stacked area chart with markers using "viridis" colors
for i, genre in enumerate(df_long['Genre'].unique()):
    if genre != 'Romance':
        sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == genre], color=viridis_colors[i], marker='o', linewidth=2.5, ax=ax1)

sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=viridis_colors[2], marker='o', linewidth=2.5, ax=ax1)

ax1.set_ylim(0, 100)  # Set y-axis range
ax1.set_ylabel('Count')
ax1.set_title('Stacked Area Chart - Genre Counts Over Time')

# Bar chart for "Romance" using "viridis" colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=viridis_colors[2], alpha=0.7, ax=ax2)
ax2.set_ylim(0, 100)  # Set y-axis range
ax2.set_ylabel('Count')
ax2.set_title('Bar Chart for Romance')

plt.xticks(rotation=45)
plt.xlabel('Timestemp')

# Adding the legend back
ax1.legend(df_long['Genre'].unique(), title='Genre')

# Remove background grid lines
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action':    [38, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 25],
    'Adventure': [0, 0, 0, 26, 39, 0, 0, 0, 0, 0, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 25],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 33, 0, 0, 26, 0, 0, 0],
    'Family':    [0, 0, 59, 0, 0, 0, 0, 0, 31, 0, 44, 0, 0],
    'Horror':    [0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12), sharex=True)

# Stacked area chart with markers
sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] != 'Romance'], hue='Genre', palette='tab20', marker='o', linewidth=2.5, ax=ax1)
ax1.set_ylim(0, 100)  # Set y-axis range
ax1.set_ylabel('Count')
ax1.set_title('Stacked Area Chart - Genre Counts Over Time')

# Bar chart for "Romance"
romance_color = sns.color_palette("tab20")[2]  # Get a different color for Romance
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=romance_color, alpha=0.7, ax=ax2)
ax2.set_ylim(0, 100)  # Set y-axis range
ax2.set_ylabel('Count')
ax2.set_title('Bar Chart for Romance')

plt.xticks(rotation=45)
plt.xlabel('Timestemp')

# Adding the legend back
ax1.legend(title='Genre')

# Remove background grid lines
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action':    [38, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 25],
    'Adventure': [0, 0, 0, 26, 39, 0, 0, 0, 0, 0, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 25],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 33, 0, 0, 26, 0, 0, 0],
    'Family':    [0, 0, 59, 0, 0, 0, 0, 0, 31, 0, 44, 0, 0],
    'Horror':    [0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(12, 8))

# Plot Gantt chart for each genre
for i, genre in enumerate(df.columns):
    plt.barh(genre, df[genre], left=df.index.map(lambda x: int(x.split('-')[0])), height=0.6, label=genre)

plt.xlabel('Time Intervals')
plt.ylabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')
plt.gca().invert_yaxis()
plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Romance':   [0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 25],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 33, 0, 0, 26, 0, 0, 0],
    'Adventure': [0, 0, 0, 26, 39, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 59, 0, 0, 0, 0, 0, 31, 0, 44, 0, 0],
    'Horror':    [0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0],
    'Action':    [38, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 25]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(12, 8))

# Plot Gantt chart for each genre
for i, genre in enumerate(df.columns):
    plt.barh(genre, df[genre], left=df.index.map(lambda x: int(x.split('-')[0])), height=0.6, label=genre)

plt.xlabel('Time Intervals')
plt.ylabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')
plt.gca().invert_yaxis()
#plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))
plt.xticks(range(0, 141, 10), rotation=45)  # Set x-axis ticks to match the specified time intervals
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10],
    'Adventure': [0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0],
    'Horror':    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0],
    'Action':    [10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

# Increase the figure size and reduce the bar height
plt.figure(figsize=(12, 6))

# Plot Gantt chart for each genre
for i, genre in enumerate(df.columns):
    plt.barh(genre, df[genre], left=df.index.map(lambda x: int(x.split('-')[0])), height=0.4, label=genre)

plt.xlabel('Time Intervals')
plt.ylabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')
plt.gca().invert_yaxis()

# Set x-axis limits to avoid extending beyond the last time interval
last_interval = int(df.index[-1].split('-')[1])
plt.xlim(0, last_interval)

# Uncomment the following line if you want to show the legend
# plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))

# Set x-axis ticks to match the specified time intervals
plt.xticks(range(0, last_interval + 11, 10), rotation=45)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
   'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(12, 8))
sns.set_theme(style="whitegrid")

# Plot heatmap for genre distribution over time intervals
sns.heatmap(data=df.T, cmap="YlGnBu", annot=True, fmt="d")

plt.xlabel('Time Intervals')
plt.ylabel('Genres')
plt.title('Heatmap-like Genre Distribution Over Time Intervals')

plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10],
    'Adventure': [0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0],
    'Horror':    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0],
    'Action':    [10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(12, 6))  # Reduced height to 50% of the original

sns.set_theme(style="whitegrid")  # Set the style for Seaborn

# Specify specific colors for each genre
genre_colors = {'Action': '#440154', 'Adventure': '#414487', 'Romance': '#2a788e', 'Fantasy': '#22a884', 'Family': '#7ad151', 'Horror': '#fde725'}

# Plot Gantt chart for each genre with specified colors
for genre in df.columns:
    plt.barh(genre, df[genre], left=df.index.map(lambda x: int(x.split('-')[0])), height=0.3, label=genre, color=genre_colors[genre])  # Reduced height

plt.xlabel('Time Intervals')
plt.ylabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')
plt.gca().invert_yaxis()

# Set x-axis limits to avoid extending beyond the last time interval
last_interval = int(df.index[-1].split('-')[1])
plt.xlim(0, last_interval)

# Remove vertical grid lines
plt.grid(axis='x', which='both', color='None')

# Uncomment the following line if you want to show the legend
# plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))

# Set x-axis ticks to match the specified time intervals
plt.xticks(range(0, last_interval + 11, 10), rotation=45)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10],
    'Adventure': [0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0],
    'Horror':    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0],
    'Action':    [10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(12, 6))  # Reduced height to 50% of the original

sns.set_theme(style="whitegrid")  # Set the style for Seaborn

# Specify custom colors for genres
genre_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']

# Plot Gantt chart for each genre with custom colors
for i, genre in enumerate(df.columns):
    plt.barh(genre, df[genre], left=df.index.map(lambda x: int(x.split('-')[0])), height=0.3, label=genre, color=genre_colors[i])  # Reduced height

plt.xlabel('Time Intervals')
plt.ylabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')
plt.gca().invert_yaxis()

# Set x-axis limits to avoid extending beyond the last time interval
last_interval = int(df.index[-1].split('-')[1])
plt.xlim(0, last_interval)

# Uncomment the following line if you want to show the legend
# plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))

# Set x-axis ticks to match the specified time intervals
plt.xticks(range(0, last_interval + 11, 10), rotation=45)

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10],
    'Adventure': [0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0],
    'Horror':    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0],
    'Action':    [10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(10, 8))  # Reduced height to 80% of the original

sns.set_theme(style="whitegrid")  # Set the style for Seaborn

# Specify custom colors for genres
genre_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']

# Plot Gantt chart for each genre with custom colors
for i, genre in enumerate(df.columns):
    plt.bar(genre, df[genre], bottom=df.index.map(lambda x: int(x.split('-')[0])), width=0.3,height=2.0 label=genre, color=genre_colors[i])  # Reduced width

plt.ylabel('Time Intervals')
plt.xlabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')

# Set y-axis limits to avoid extending beyond the last time interval
last_interval = int(df.index[-1].split('-')[1])
plt.ylim(0, last_interval)

# Uncomment the following line if you want to show the legend
# plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))

# Set y-axis ticks to match the specified time intervals
plt.yticks(range(0, last_interval + 20, 20))

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a DataFrame with the provided data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10],
    'Adventure': [0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0],
    'Horror':    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0],
    'Action':    [10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10]
}

df = pd.DataFrame(data)
df.set_index('Timestemp', inplace=True)

plt.figure(figsize=(10, 8))  # Reduced height to 80% of the original

sns.set_theme(style="whitegrid")  # Set the style for Seaborn

# Specify custom colors for genres
genre_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']

# Plot Gantt chart for each genre with custom colors
for i, genre in enumerate(df.columns):
    plt.bar(genre, df[genre], bottom=df.index.map(lambda x: int(x.split('-')[0])), width=0.2, label=genre, color=genre_colors[i])  # Reduced width

plt.ylabel('Time Intervals')
plt.xlabel('Genres')
plt.title('Gantt Chart-like Genre Distribution Over Time Intervals')

# Set y-axis limits to avoid extending beyond the last time interval
last_interval = int(df.index[-1].split('-')[1])
plt.ylim(0, last_interval)

# Uncomment the following line if you want to show the legend
# plt.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0))

# Set y-axis ticks to match the specified time intervals
plt.yticks(range(0, last_interval + 11, 20))

plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Sample data
data = {
    "Month": pd.date_range(start="2023-01-01", periods=100, freq="M"),
    "Value": [10, 15, 12, 8, 20, 18, 25, 22, 30, 28] * 10
}

df = pd.DataFrame(data)
df["Month"] = df["Month"].dt.month_name()

plt.figure(figsize=(10, 6))
plt.boxplot(df.groupby("Month")["Value"].apply(list), vert=False)
plt.xlabel("Value")
plt.ylabel("Month")
plt.title("Time Series Box Plot")
plt.yticks(range(1, 13), df["Month"].unique())
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Sample data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Fantasy':   [0, 0, 0, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0],
    'Romance':   [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 10],
    'Adventure': [0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    'Family':    [0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0],
    'Horror':    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0],
    'Action':    [10, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10]
}

df = pd.DataFrame(data)

# Set 'Timestemp' as the index
df.set_index('Timestemp', inplace=True)

# Create a horizontal box plot
plt.figure(figsize=(10, 8))
df.boxplot(vert=False)
plt.ylabel("Time Interval")
plt.xlabel("Count")
plt.title("Box Plot of Movie Genres by Time Interval")
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Sample data
data = {
    "Date": pd.date_range(start="2023-01-01", periods=10, freq="M"),
    "A": [10, 15, 12, 8, 20, 18, 25, 22, 30, 28],
    "B": [5, 8, 6, 4, 10, 9, 12, 11, 15, 14]
}

df = pd.DataFrame(data)
df.set_index("Date", inplace=True)

plt.figure(figsize=(10, 6))
df.plot(kind="area", stacked=False)
plt.xlabel("Date")
plt.ylabel("Value")
plt.title("Time Series Area Plot")
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()