# -*- coding: utf-8 -*-
"""Paper Review Charts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zkcd0HI1BAEzeqbBapVrQKmtCv5DdfDV
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = {
    'Movie': ["The Twilight Saga: Eclipse (2010)"],
    'Action': [5],
    'Adventure': [5],
    'Romance': [45],
    'Fantasy': [30],
    'Family': [5],
    'Horror': [10]
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

# Get the top two genres with the highest values
top_genres = df.iloc[0].nlargest(2)

# Plotting the stacked bar chart for the top two genres
plt.figure(figsize=(6, 4), dpi=100)
top_genres.plot(kind='bar', stacked=True, color=['blue', 'green'])
plt.title(df.index[0])
plt.ylabel('Percentage')
plt.xlabel('Genres')
plt.xticks(rotation=0)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Set the title and labels
plt.title("Genre Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Show the legend with custom colors and labels outside the plot
plt.legend(title="Genres", labels=df.columns, loc="upper left", bbox_to_anchor=(1, 1))

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Show the plot
plt.show()

import pandas as pd

# Define the data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Sum the occurrences for each genre
genre_occurrences = df.drop(columns="Timestamp").sum().sort_values()

# Print the genres in ascending order of occurrence
print(genre_occurrences)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Calculate the total occurrences for each genre
genre_occurrences = df.sum().sort_values(ascending=False)

# Select the top two genres
top_two_genres = genre_occurrences.head(2).index.tolist()

# Filter the DataFrame to include only the top two genres
df_top_two = df[top_two_genres]

# Define the colors for the top two genres
colors = ["yellow", "black"]

# Create a horizontal stacked bar plot for the top two genres
sns.set(style="white")
ax = df_top_two.plot(kind="barh", stacked=True, figsize=(10, 6), color=colors)

# Set the title and labels
plt.title("Genres Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Show the legend with custom colors and labels outside the plot
plt.legend(title="Top Genres", labels=top_two_genres, loc="upper left", bbox_to_anchor=(1, 1))

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd

# Define the data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Export the DataFrame to an Excel file
excel_file_path = "data.xlsx"
df.to_excel(excel_file_path, index=False)

print(f"Data has been successfully exported to '{excel_file_path}'.")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Select only the "Family" and "Horror" columns
df_selected = df[["Family", "Horror"]]

# Define the colors for the selected genres
colors = ["yellow", "black"]

# Create a horizontal stacked bar plot for the selected genres with custom colors
sns.set(style="white")
ax = df_selected.plot(kind="barh", stacked=True, figsize=(10, 5), color=colors)

# Set the title and labels
plt.title("Genre Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Show the legend with custom colors and labels outside the plot
plt.legend(title="Top Genres", labels=df_selected.columns, loc="upper left", bbox_to_anchor=(1, 1))

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Select only the "Family" and "Horror" columns
df_selected = df[["Family", "Horror"]]

# Define the colors for the selected genres
colors = ["yellow", "black"]

# Create a horizontal stacked bar plot for the selected genres with custom colors
sns.set(style="white")
ax = df_selected.plot(kind="barh", stacked=True, figsize=(10, 5), color=colors)

# Set the x-axis limits to 0 to 100
plt.xlim(0, 120)

# Set the title and labels
plt.title("Top Two Genre Occurrence Over Time Intervals")
plt.ylabel("Time Intervals")
plt.xlabel("Percentage Occurrence")

# Show the legend with custom colors and labels outside the plot
plt.legend(title="Top Two Genres", labels=df_selected.columns, loc="upper left", bbox_to_anchor=(1, 1))

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Show the plot
plt.tight_layout()
plt.show()

# Hide genre labels around the chartimport matplotlib.pyplot as plt
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]
angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create even spaces around the circle

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Hide genre labels around the chart
ax.set_xticks([])

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(5, 25, 5))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom')  # Adjusted distance (5) from the bar

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.05, 1.05), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.05)

# Save the figure with 300 dpi resolution
plt.savefig('polar_chart All.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom')  # Adjusted distance (5) from the bar

# Hide specific polar bars (e.g., Adventure and Romance)
bars[1].set_height(0)  # Hide Adventure
bars[-1].set_height(0)  # Hide Romance

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Create handles and labels for legend (excluding Adventure and Romance)
legend_handles = [bars[i] for i in range(len(bars)) if i not in [1, len(bars) - 1]]
legend_labels = [labels[i] for i in range(len(labels)) if i not in [1, len(labels) - 1]]

# Legend without Adventure and Romance labels
plt.legend(legend_handles, legend_labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Calculate maximum statistic value
max_stat = max(statistics)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    label_pos = stat + 0.1 * max_stat  # Adjusted distance based on maximum statistic value
    ax.text(mid_angle, label_pos, f'{stat}%', ha='center', va='bottom')  # Adjusted position

# Hide specific polar bars (e.g., Adventure and Romance)
bars[1].set_height(0)  # Hide Adventure
bars[-1].set_height(0)  # Hide Romance

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Create handles and labels for legend (excluding Adventure and Romance)
legend_handles = [bars[i] for i in range(len(bars)) if i not in [1, len(bars) - 1]]
legend_labels = [labels[i] for i in range(len(labels)) if i not in [1, len(labels) - 1]]

# Legend without Adventure and Romance labels
plt.legend(legend_handles, legend_labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    text_obj = ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom')  # Adjusted distance (5) from the bar
    # Hide text for hidden categories
    if labels[i] in ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror']:
        text_obj.set_visible(False)

# Hide specific polar bars (e.g., Action, Adventure, Family, Fantasy, Horror)
bars[0].set_height(0)  # Hide Action
bars[1].set_height(0)  # Hide Adventure
bars[2].set_height(0)  # Hide Family
bars[3].set_height(0)  # Hide Fantasy
bars[4].set_height(0)  # Hide Horror

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Create handles and labels for legend (excluding Action, Adventure, Family, Fantasy, Horror)
legend_handles = [bars[i] for i in range(len(bars)) if i not in [0, 1, 2, 3, 4]]
legend_labels = [labels[i] for i in range(len(labels)) if i not in [0, 1, 2, 3, 4]]

# Legend without Action, Adventure, Family, Fantasy, Horror labels
plt.legend(legend_handles, legend_labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    text_obj = ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom')  # Adjusted distance (5) from the bar
    # Hide text for hidden categories
    if labels[i] in ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror']:
        text_obj.set_visible(False)

# Hide specific polar bars (e.g., Action, Adventure, Family, Fantasy, Horror)
bars[0].set_height(0)  # Hide Action
bars[1].set_height(0)  # Hide Adventure
bars[2].set_height(0)  # Hide Family
bars[3].set_height(0)  # Hide Fantasy
bars[4].set_height(0)  # Hide Horror

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Create handles and labels for legend (excluding Action, Adventure, Family, Fantasy, Horror)
legend_handles = [bars[i] for i in range(len(bars)) if i not in [0, 1, 2, 3, 4]]
legend_labels = [labels[i] for i in range(len(labels)) if i not in [0, 1, 2, 3, 4]]

# Legend without Action, Adventure, Family, Fantasy, Horror labels
plt.legend(legend_handles, legend_labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)

# Save the figure with 300 dpi resolution
plt.savefig('polar_chart top 1.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    text_obj = ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom')  # Adjusted distance (5) from the bar
    # Hide text for hidden categories
    if labels[i] in [ 'Family']:
        text_obj.set_visible(False)

# Hide specific polar bars (e.g., Action, Adventure, Family, Fantasy, Horror)
#bars[0].set_height(0)  # Hide Action
#bars[1].set_height(0)  # Hide Adventure
bars[2].set_height(0)  # Hide Family
#bars[3].set_height(0)  # Hide Fantasy
#bars[4].set_height(0)  # Hide Horror

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Create handles and labels for legend (excluding Action, Adventure, Family, Fantasy, Horror)
legend_handles = [bars[i] for i in range(len(bars)) if i not in [  2]]
legend_labels = [labels[i] for i in range(len(labels)) if i not in [  2]]

# Legend without Action, Adventure, Family, Fantasy, Horror labels
plt.legend(legend_handles, legend_labels, loc='upper right', bbox_to_anchor=(1.15, 0.91), title="Genres")

# Adjust title position
plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.05)

# Save the figure with 300 dpi resolution
plt.savefig('polar_chart_top5.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistical values on the bars
for angle, stat, label in zip(angles[:-1], statistics[:-1], labels):
    ax.text(angle, stat + 2, f'{stat}%', ha='center', va='bottom', fontsize=10, fontweight='bold', color='white')

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 50, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.1, 1.1), title="Genres")

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.1)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom', fontweight='bold')  # Adjusted distance (5) from the bar

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 60, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
#plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.15, 0.91), title="Genres")  # Changed bbox_to_anchor

#plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.05)

# Save the figure with 300 dpi resolution
#plt.savefig('polar_chart All.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    if labels[i] == 'Romance':
        mid_angle = 45 - np.pi / 2  # Adjust angle for Romance label
    else:
        mid_angle = (angle + angles[i + 1]) / 2

    ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold')  # Adjusted distance (10) from the bar

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 60, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
#plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.15, 0.91), title="Genres")  # Changed bbox_to_anchor

#plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.05)

# Save the figure with 300 dpi resolution
plt.savefig('Polar Top 4.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you with varying transparency
colors = [("red", 1.0), ("green", 0.2), ("yellow", 0.3), ("blue", 1.0), ("black", 1.0), ("pink", 1.0)]

# Draw one bar per category with specified colors and transparencies
bars = ax.bar(angles[:-1], statistics[:-1], align='edge', linewidth=0, alpha=0.75)  # Default transparency

# Set the color and transparency for each bar individually
for i, (color, transparency) in enumerate(colors):
    bars[i].set_color(color)
    bars[i].set_alpha(transparency)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    if labels[i] == 'Romance':
        mid_angle = 45 - np.pi / 2  # Adjust angle for Romance label
    else:
        mid_angle = (angle + angles[i + 1]) / 2
    if labels[i] == 'Adventure' or labels[i] == 'Family':
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold', alpha=0.0)
    else:
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold')

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 60, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Polar Top 4.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Draw one bar per category
bars = ax.bar(angles[:-1], statistics[:-1], color=colors, align='edge', linewidth=0)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    mid_angle = (angle + angles[i + 1]) / 2
    ax.text(mid_angle, stat + 5, f'{stat}%', ha='center', va='bottom')  # Adjusted distance (5) from the bar

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 60, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Draw a line at the outermost radial tick on the y-axis
outermost_tick = ax.get_yticks()[-1]
ax.plot([0, 2 * np.pi], [outermost_tick, outermost_tick], color='black', linestyle='-', linewidth=1)

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Legend
plt.legend(bars, labels, loc='upper right', bbox_to_anchor=(1.15, 0.91), title="Genres")  # Changed bbox_to_anchor

plt.title('Polar Area Chart of The Twilight Saga: Eclipse (2010)', size=16, color='black', y=1.05)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.05, 0.05, 0.05, 0.05, 0.05, 0.05)  # Explode all segments equally
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')
plt.title('Pie Chart of The Twilight Saga: Eclipse (2010)')

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
#colors = ["red", "green", "yellow", "blue", "black", "pink"]
colors = ["White", "White", "White", "White", "White", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() != 'Romance':
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_singletop_1.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = ["White", "White", "White", "white", "blue", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_singletop_2.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = ["White", "White", "White", "black", "blue", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_singletop_3.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Adventure', 'Family','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = ["White", "White", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = ["White", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_all_start.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.1)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_top_1.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.1, 0.1)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_top_2.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.1, 0.1, 0.1)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_top_3.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.1, 0.1, 0.1, 0.1)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.1, 0.1, 0.1, 0.1, 0.1)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # Explode all segments equally
colors = ["yellow", "green", "red", "black", "blue", "pink"]
#colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Plotting the pie chart with explode
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy','Horror','Action','Adventure','Family']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode')

# Save the figure with 300 dpi resolution
plt.savefig('pie_all_end.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 1, 0, 0.1),  # Yellow (full brightness)
          (0, 1, 0, 0.1),  # Green (60% brightness)
          (1, 0, 0, 0.1),  # Red (40% brightness)
          (0, 0, 0, 0.1),  # Black (70% brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)
#,'Horror','Action','Adventure','Family'

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('pie_adjusted_brightness.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]
#labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
#sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)
#,'Horror','Action','Adventure','Family'

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('pie_adjusted_brightness.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of 'Horror' label to black and percentage value to white
for text, autotext in zip(texts, autotexts):
    if text.get_text() == 'Horror':
        text.set_text('Horror')
        text.set_color('black')
        autotext.set_color('white')

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('pie_adjusted_brightness.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]
#labels = ['Family','Adventure','Action', 'Horror','Fantasy',  'Romance']
#sizes = [5, 5, 5, 10, 30, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 0.05),  # Red (40% brightness)
          (0, 1, 0, 0.05),  # Green (60% brightness)
          (1, 1, 0, 0.05),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 0.05),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, explode=explode, colors=colors)

# Set the text color of non-Romance and non-Fantasy segments to white and hide their labels
for text, autotext in zip(texts, autotexts):
    if text.get_text() not in ['Romance', 'Fantasy']:
        text.set_text('')
        text.set_color('white')
        autotext.set_visible(False)
#,'Horror','Action','Adventure','Family'

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('pie_adjusted_brightness.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10))

# Create legend using the labels and colors
plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('pie_adjusted_brightness_with_legend.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=12, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Customize the plot
#ax.set_title('Pie Chart with Explode and Adjusted Brightness', fontweight='bold')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Full.png', dpi=300)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 0.05),  # Red (40% brightness)
          (0, 1, 0, 0.05),  # Green (60% brightness)
          (1, 1, 0, 0.05),  # Yellow (full brightness)
          (0, 0, 1, 0.05),  # Blue (50% brightness)
          (0, 0, 0, 0.05),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 1.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 0.05),  # Red (40% brightness)
          (0, 1, 0, 0.05),  # Green (60% brightness)
          (1, 1, 0, 0.05),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 0.05),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 2.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 0.05),  # Red (40% brightness)
          (0, 1, 0, 0.05),  # Green (60% brightness)
          (1, 1, 0, 0.05),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 3.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 0.2),  # Green (60% brightness)
          (1, 1, 0, 0.25),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror','Action']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 4.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 0.05),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror','Action','Adventure']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 5.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror','Action','Adventure','Family']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 6.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]

# Sort labels and sizes in descending order based on sizes
sorted_data = sorted(zip(sizes, labels), reverse=True)
sizes_sorted, labels_sorted = zip(*sorted_data)

# Plotting the sorted bar chart
plt.figure(figsize=(10, 6))
plt.bar(labels_sorted, sizes_sorted, color=['red', 'green', 'yellow', 'blue', 'black', 'pink'])
plt.xlabel('Genres')
plt.ylabel('Sizes')
plt.title('Sorted Bar Chart')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Sort labels and sizes based on sizes first, then by labels if sizes are equal
sorted_data = sorted(zip(sizes, labels, colors), key=lambda x: (-x[0], x[1]))
sizes_sorted, labels_sorted, colors_sorted = zip(*sorted_data)

# Plotting the sorted bar chart with consistent colors
plt.figure(figsize=(10, 6))
bars = plt.bar(labels_sorted, sizes_sorted, color=colors_sorted)

# Customize the spines to remove top and right borders
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

plt.xlabel('Genres')
plt.ylabel('Sizes')
#plt.title('Sorted Bar Chart')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Sort labels and sizes based on sizes first, then by labels if sizes are equal
sorted_data = sorted(zip(sizes, labels, colors), key=lambda x: (-x[0], x[1]))
sizes_sorted, labels_sorted, colors_sorted = zip(*sorted_data)

# Plotting the sorted bar chart with consistent colors
plt.figure(figsize=(10, 6))
bars = plt.bar(labels_sorted, sizes_sorted, color=colors_sorted)

# Customize the spines to remove top and right borders
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Add percentage labels on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)

plt.xlabel('Genres')
plt.ylabel('Sizes')
#plt.title('Sorted Bar Chart with Percentage Labels')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Sort labels and sizes based on sizes first, then by labels if sizes are equal
sorted_data = sorted(zip(sizes, labels, colors), key=lambda x: (-x[0], x[1]))
sizes_sorted, labels_sorted, colors_sorted = zip(*sorted_data)

# Plotting the sorted bar chart with consistent colors
plt.figure(figsize=(10, 6))
bars = plt.bar(labels_sorted, sizes_sorted, color=colors_sorted)

# Customize the spines to remove top, right, and left borders
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)

# Add percentage labels on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)

#plt.xlabel('Genres')
#plt.title('Sorted Bar Chart with Percentage Labels')

# Remove the left y-axis ticks, labels, and tick values at 10, 20, and 30
plt.tick_params(axis='y', left=False)
plt.yticks([])

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Plotting the lollipop chart
plt.figure(figsize=(10, 6))
plt.stem(labels, sizes, markerfmt='ro', linefmt='-')

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
plt.title('Lollipop Chart')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Plotting the lollipop chart with different colors and increased marker size
plt.figure(figsize=(10, 6))
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=15, color=color, label=label)
    #plt.text(label, size + 1, f'{size}%', ha='center')

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
plt.title('Lollipop Chart with Different Colors and Increased Marker Size')
#plt.legend()

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Plotting the lollipop chart with different colors and increased marker size
plt.figure(figsize=(10, 6))
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.stem([label], [size], markerfmt='o', linefmt='-', basefmt='-', label=label, use_line_collection=True)
    plt.text(label, size + 1, f'{size}%', ha='center')

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
plt.title('Lollipop Chart with Different Colors and Increased Marker Size')
plt.legend()

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars
bars = plt.bar(labels, sizes, color=colors, width=0.5, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=10, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
plt.title('Lollipop Chart with Bars and Markers')
plt.legend()

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
#labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
#sizes = [5, 5, 5, 30, 10, 45]
#colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']
labels = [ 'Romance','Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [ 45, 30, 10,  5, 5, 5,]
colors = [ 'pink','blue', 'black', 'red', 'green', 'yellow']
# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
#plt.title('Lollipop Chart with Reduced Width Bars and Markers')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text inside the marker (size value as percentage)
    plt.text(label, size, f'{size}%', ha='center', va='bottom', fontsize=10)

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
#plt.title('Lollipop Chart with Reduced Width Bars and Markers')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10)

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xlabel('Genres')
plt.ylabel('Sizes')
#plt.title('Lollipop Chart with Reduced Width Bars and Markers')

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10)

# Customize the plot
plt.tick_params(left=False)  # Hide left ticks
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10)

# Customize the plot
plt.tick_params(left=False)  # Hide left ticks
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.yticks([])  # Remove y-axis scale values

# Show plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10)

# Create custom legend using proxy artists
legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.tick_params(left=False)  # Hide left ticks
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.yticks([])  # Remove y-axis scale values

# Show plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set a higher alpha value for the 'Romance' bar
bars[0].set_alpha(0.6)  # Index 0 corresponds to 'Romance' in labels

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10, weight='bold')

# Create custom legend using proxy artists
legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
#plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 6.png', dpi=600)

# Show plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Sort data by sizes
sorted_data = sorted(zip(labels, sizes, colors), key=lambda x: x[1], reverse=True)
labels, sizes, colors = zip(*sorted_data[:6])  # Select top 4 categories

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set a higher alpha value for the 'Romance' bar
bars[0].set_alpha(0.6)  # Index 0 corresponds to 'Romance' in labels

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10, weight='bold')

# Create custom legend using proxy artists
legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
#plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 5.png', dpi=600)

# Show plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Sort data by sizes
sorted_data = sorted(zip(labels, sizes, colors), key=lambda x: x[1], reverse=True)
labels, sizes, colors = zip(*sorted_data[:6])  # Select top 4 categories

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set alpha values for specific bars ('Family' and 'Adventure')
bars[-1].set_alpha(0.2)  # Index -1 corresponds to 'Family' in labels
bars[-2].set_alpha(0.6)  # Index -2 corresponds to 'Adventure' in labels

# Plotting markers with customized alpha
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    #if label == 'Family' or label == 'Adventure':
    if label == 'Family':
        alpha_value = 0.2  # Set lower alpha for 'Family' and 'Adventure'
        label_color = 'white'  # Set label color to white
    else:
        alpha_value = 1.0  # Default alpha for other markers
        label_color = 'black'  # Default label color
    plt.plot(label, size, marker='o', markersize=25, color=color, alpha=alpha_value)  # Adjust alpha for markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage) with custom label color
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10, weight='bold', alpha=alpha_value, color=label_color)  # Adjust alpha and color for labels

# Create custom legend using proxy artists
#legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
#plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 5.png', dpi=600)

# Show plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Plotting markers
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    plt.plot(label, size, marker='o', markersize=25, color=color)  # Colorful markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage)
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=10)

# Create custom legend using proxy artists
legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.yticks([])  # Remove y-axis scale values
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.gca().spines['bottom'].set_visible(False)  # Hide bottom spine (x-axis line)

# Show plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Set the title and labels
#plt.title("Genre Occurrence Over Time Intervals")
#plt.ylabel("Time Intervals")
#plt.xlabel("Percentage Occurrence")

# Show the legend with custom colors and labels outside the plot
#plt.legend(title="Genres", labels=df.columns, loc="upper left", bbox_to_anchor=(1, 1))

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Stacked All 6.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

ax.set_xlabel("Count")
ax.set_ylabel("Timestamp")

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Stacked All 6.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams


# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

ax.set_xlabel("Count", fontsize=12, fontweight='bold')  # Increase font size and make bold
ax.set_ylabel("Timestamp", fontsize=12, fontweight='bold')  # Increase font size and make bold

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Stacked All 6.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25]
}

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count")
ax.set_ylabel("Timestamp")

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 1.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count")
ax.set_ylabel("Timestamp")

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 2.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count")
ax.set_ylabel("Timestamp")

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 3.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count")
ax.set_ylabel("Timestamp")

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 4.png', dpi=600)


# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 5.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]


}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["pink", "green", "yellow",  "blue", "black", "red",]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

ax.set_xlabel("Count")
ax.set_ylabel("Timestamp")

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

# Save the figure with 300 dpi resolution
plt.savefig('Romance A F F H Stacked.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Get the top 3 values for the 'Action' genre
top_action = df_long[df_long['Genre'] == 'Action'].nlargest(3, 'Count')

# Manually specified "viridis" colors
# viridis_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))  # Adjust the figure size

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Action" with only top 3 values
sns.barplot(x='Timestemp', y='Count', data=top_action, color=viridis_colors[0], alpha=0.8, zorder=10)

plt.xticks(rotation=45)
plt.xlabel('Timestemp')
plt.ylabel('Count')
plt.title('Stacked Area Chart with Action Bar - Genre Counts Over Time')

# Remove background grid lines
plt.grid(False)

# Hide the legend
plt.legend().set_visible(False)

# Set y-axis scale to 100
plt.ylim(0, 100)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.show()

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Get the top 3 values for the 'Action' genre
top_action = df_long[df_long['Genre'] == 'Action'].nlargest(3, 'Count')

# Manually specified "viridis" colors
# viridis_colors = ['#440154', '#414487', '#2a788e', '#22a884', '#7ad151', '#fde725']
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))  # Adjust the figure size

# Lineplot for "Action" genre only
sns.lineplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Action'], color=viridis_colors[0], marker='o', linewidth=2.5)

# Bar chart for "Action" with only top 3 values
sns.barplot(x='Timestemp', y='Count', data=top_action, color=viridis_colors[0], alpha=0.8, zorder=10)

plt.xticks(rotation=45)
plt.xlabel('Timestemp')
plt.ylabel('Count')
plt.title('Stacked Area Chart with Action Bar - Genre Counts Over Time')

# Remove background grid lines
plt.grid(False)

# Hide the legend
plt.legend().set_visible(False)

# Set y-axis scale to 100
plt.ylim(0, 100)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

# Add line chart behind bars with the same color palette
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.8, legend=False)

plt.xlabel('Timestamp')
plt.ylabel('Count')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid
plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Add line chart behind bars with the same color palette
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.5, legend=False)

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

plt.xlabel('Timestamp')
plt.ylabel('Count')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid
plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Add line chart behind bars with the same color palette
#sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.5, legend=False)

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

plt.xlabel('Trailer Timestamp')
plt.ylabel('Top Genre Count')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid
plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

plt.tight_layout()

# Save the figure with 300 dpi resolution
plt.savefig('Summery Timeline Top.png', dpi=600)

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [35, 30, 25, 20, 15, 12, 10, 8, 8, 10, 15, 20, 25],
    'Adventure': [15, 20, 25, 30, 25, 20, 15, 12, 10, 8, 8, 10, 15],
    'Romance': [5, 10, 10, 8, 10, 10, 8, 8, 10, 10, 5, 10, 10],
    'Fantasy': [20, 15, 20, 25, 20, 15, 15, 10, 8, 5, 8, 12, 15],
    'Family': [10, 10, 10, 10, 10, 15, 15, 20, 20, 20, 20, 15, 10],
    'Horror': [15, 15, 15, 17, 20, 23, 22, 22, 24, 27, 24, 23, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Add line chart behind bars with the same color palette
#sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.5, legend=False)

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

#plt.xlabel('Timestamp')
#plt.ylabel('Count')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid
plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

# Save the figure with 300 dpi resolution
plt.savefig('Spider-Man: Far From Home 2019.png', dpi=600)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[1]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Adventure'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Remove x label, y label, y axis, and legend
#plt.xticks([])
plt.xticks(rotation=45)
plt.yticks([])
plt.xlabel('')
plt.ylabel('')
plt.legend().set_visible(False)

# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
#ax.spines['bottom'].set_visible(False)

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

# Save the figure with 300 dpi resolution
plt.savefig('Adventure Timeline View.png', dpi=600)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[0]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Action'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Show y-axis scale with labels
plt.yticks(range(0, 101, 20), [str(x) for x in range(0, 101, 20)])
plt.xticks(rotation=45)

# Remove x label and legend
plt.xlabel('Trailer Timestamp')
plt.ylabel('Genre Count')
plt.legend().set_visible(False)

# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
#ax.spines['left'].set_visible(False)

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.savefig('Fantacy Timeline View.png', dpi=600)
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [10, 10, 5, 10, 60, 5]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 0.1),  # Green (60% brightness)
          (1, 1, 0, 0.1),  # Yellow (full brightness)
          (0, 0, 1, 0.1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.1)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=10, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Horror','Action']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Frame Pie.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [10, 10, 5, 10, 60, 5]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you with varying transparency
colors = [("red", 1.0), ("green", 0.0), ("yellow", 0.0), ("blue", 0.0), ("black", 1.0), ("pink", 0.0)]

# Draw one bar per category with specified colors and transparencies
bars = ax.bar(angles[:-1], statistics[:-1], align='edge', linewidth=0, alpha=0.75)  # Default transparency

# Set the color and transparency for each bar individually
for i, (color, transparency) in enumerate(colors):
    bars[i].set_color(color)
    bars[i].set_alpha(transparency)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    if labels[i] == 'Romance':
        mid_angle = 45 - np.pi / 2  # Adjust angle for Romance label
    else:
        mid_angle = (angle + angles[i + 1]) / 2
    if labels[i] in ['Adventure', 'Family', 'Fantasy', 'Romance']:
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold', alpha=0.0)
    else:
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold')

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 70, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Frame Polar.png', dpi=600)

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties

data = {
    'Movie': "Hansel & Gretel: Frame@1:40",
    'Action': 10,
    'Adventure': 10,
    'Romance': 5,
    'Fantasy': 10,
    'Family': 5,
    'Horror': 60
}

df = pd.DataFrame([data])
df.set_index('Movie', inplace=True)

# Specify colors with transparency (alpha) values
colors = [(1, 0, 0, 1), (0, 1, 0, 0.1), (1, 0, 1, 0.1), (0, 0, 1, 0.1), (1, 1, 0, 0.1), (0, 0, 0, 1)]

sns.set(style="whitegrid")
plt.figure(figsize=(5, 5), dpi=300)

wedges, texts, autotexts = plt.pie(
    df.iloc[0],
    labels=[f'{label}\n{val}%' for label, val in zip(df.columns, df.iloc[0])],
    colors=colors,
    startangle=140,
    autopct='',
    wedgeprops=dict(width=0.4)
)
plt.axis('equal')

# Bold the labels on the pie chart segments
font_props = FontProperties(weight='bold', size=8)
for text in texts:
    text.set_font_properties(font_props)
    if 'Adventure' in text.get_text() or 'Romance' in text.get_text() or 'Fantasy' in text.get_text() or 'Family' in text.get_text():
        text.set_color('white')  # Set white color for specific labels

#plt.title("")  # Clear the title to make space for the movie title
#plt.text(0, 0, df.index[0], ha='center', va='center', fontsize=8, color='black', fontweight='bold')

# Save the figure with 300 dpi resolution
plt.savefig('Frame Donut.png', dpi=600)

plt.gcf().subplots_adjust(top=0.9)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Family': [5, 5, 5, 5, 5],
    'Fantasy': [30, 20, 30, 20, 20],
    'Horror': [10, 0, 5, 20, 20],
    'Romance': [45, 10, 15, 5, 15],
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Define custom colors for each genre
genre_colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Create a horizontal stacked bar chart
plt.figure(figsize=(10, 6))
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

ax = df_percentage.plot(kind='barh', stacked=True)

plt.title('Stacked Bar Chart of Movie Genres')
plt.xlabel('Percentage')
plt.ylabel('Movies')

sns.despine()

handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Family': [5, 5, 5, 5, 5],
    'Fantasy': [30, 20, 30, 20, 20],
    'Horror': [10, 0, 5, 20, 20],
    'Romance': [45, 10, 15, 5, 15],
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Define custom colors for each genre
genre_colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Create a horizontal stacked bar chart
#plt.figure(figsize=(10, 6))
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

ax = df_percentage.plot(kind='barh', stacked=True)

plt.title('Stacked Bar Chart of Movie Genres')
plt.xlabel('Percentage')
plt.ylabel('Movies')

sns.despine()

handles, labels = ax.get_legend_handles_labels()
ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

# Save the figure with 600 dpi resolution
plt.savefig('5 Movies Stacked.png', dpi=600)

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Family': [5, 5, 5, 5, 5],
    'Fantasy': [30, 20, 30, 20, 20],
    'Horror': [10, 0, 5, 20, 20],
    'Romance': [45, 10, 15, 5, 15],
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Define custom colors for each genre
genre_colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Create a horizontal stacked bar chart
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

plt.figure(figsize=(10, 6))

ax = df_percentage.plot(kind='barh', stacked=True)

#plt.title('Stacked Bar Chart of Movies Genres')
plt.xlabel('Genres Count')
plt.ylabel('Movies')

sns.despine()

handles, labels = ax.get_legend_handles_labels()
#ax.legend(reversed(handles), reversed(labels), loc='center right', bbox_to_anchor=(1.25, 0.5))

# Save the figure with 600 dpi resolution and adjust the bounding box to avoid cutoff
plt.savefig('5 Movies Stacked.png', dpi=600, bbox_inches='tight')

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Family': [5, 5, 5, 5, 5],
    'Fantasy': [30, 20, 30, 20, 20],
    'Horror': [10, 0, 5, 20, 20],
    'Romance': [45, 10, 15, 5, 15],
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Define custom colors for each genre
genre_colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Create a horizontal stacked bar chart
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

plt.figure(figsize=(10, 6))

ax = df_percentage.plot(kind='barh', stacked=True)

plt.xlabel('Genres Count')
plt.ylabel('Movies')

sns.despine()

# Remove the legend
ax.get_legend().remove()

# Save the figure with 600 dpi resolution and adjust the bounding box to avoid cutoff
plt.savefig('5 Movies Stacked.png', dpi=600, bbox_inches='tight')

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Create a DataFrame with the provided data
data = {
    'Movie': [
        "The Twilight Saga: Eclipse (2010)",
        "I Am Number Four (2011)",
        "Snow White and the Huntsman (2012)",
        "Hansel & Gretel: Witch Hunters (2013)",
        "Dracula Untold (2014)"
    ],
    'Action': [5, 30, 25, 25, 20],
    'Adventure': [5, 35, 20, 25, 20],
    'Family': [5, 5, 5, 5, 5],
    'Fantasy': [30, 20, 30, 20, 20],
    'Horror': [10, 0, 5, 20, 20],
    'Romance': [45, 10, 15, 5, 15],
}

df = pd.DataFrame(data)
df.set_index('Movie', inplace=True)

total_per_movie = df.sum(axis=1)
df_percentage = df.div(total_per_movie, axis=0) * 100

# Define custom colors for each genre
genre_colors = ['red', 'green', 'yellow', 'blue', 'black', 'pink']

# Create a horizontal stacked bar chart
sns.set(style="white")

# Set the custom color palette
sns.set_palette(sns.color_palette(genre_colors))

plt.figure(figsize=(10, 6))

# Adjust the width of the bars (bar_width)
bar_width = 0.5  # You can adjust this value to reduce or increase the width of the bars

ax = df_percentage.plot(kind='barh', stacked=True, width=bar_width)

plt.xlabel('Genres Count')
plt.ylabel('Movies')

sns.despine()

# Hide the legend
ax.legend().set_visible(False)

# Save the figure with 600 dpi resolution and adjust the bounding box to avoid cutoff
plt.savefig('5 Movies Stacked.png', dpi=600, bbox_inches='tight')

plt.show()

import pandas as pd

# Read the Excel file
df = pd.read_excel('/content/Top 25 Trailer Annotation By Humans Sorted.xlsx')

# Calculate the total scores for each genre
df['Total'] = df[['Action', 'Adventure', 'Family','Fantasy', 'Harror','Romance']].sum(axis=1)

# Sort the DataFrame by Total score and alphabetically for tie-breaking
df = df.sort_values(by=['Total', 'Action', 'Adventure', 'Family','Fantasy', 'Harror','Romance'], ascending=[False, False, False, False, False, False, False])

# Reset the index of the DataFrame
df.reset_index(drop=True, inplace=True)

# Assign top genres based on the sorted order
df['Top 1'] = ''
df['Top 2'] = ''
df['Top 3'] = ''
df['Top 4'] = ''
df['Top 5'] = ''
df['Top 6'] = ''

for i in range(len(df)):
    genres = ['Action', 'Adventure', 'Family','Fantasy', 'Harror','Romance']
    top_genres = df.loc[i, genres].sort_values(ascending=False).index.tolist()
    for j in range(len(top_genres)):
        df.loc[i, f'Top {j+1}'] = top_genres[j]

# Save the updated DataFrame to a new Excel file
df.to_excel('top_genre_rankings.xlsx', index=False)

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 0.1),  # Green (60% brightness)
          (1, 1, 0, 0.1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=12, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror','Action']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 4.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Sort data by sizes
sorted_data = sorted(zip(labels, sizes, colors), key=lambda x: x[1], reverse=True)
labels, sizes, colors = zip(*sorted_data[:6])  # Select top 4 categories

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set alpha values for specific bars ('Family' and 'Adventure')
bars[-1].set_alpha(0.1)  # Index -1 corresponds to 'Family' in labels
bars[-2].set_alpha(0.05)  # Index -2 corresponds to 'Adventure' in labels

# Plotting markers with customized alpha
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    if label == 'Family':
    #if label == 'Family':
        alpha_value = 0.15  # Set lower alpha for 'Family' and 'Adventure'
        label_color = 'white'  # Set label color to white
    elif label == 'Adventure':
    #if label == 'Family':
        alpha_value = 0.05  # Set lower alpha for 'Family' and 'Adventure'
        label_color = 'white'  # Set label color to white
    else:
        alpha_value = 1.0  # Default alpha for other markers
        label_color = 'black'  # Default label color
    plt.plot(label, size, marker='o', markersize=25, color=color, alpha=alpha_value)  # Adjust alpha for markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage) with custom label color
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=12, weight='bold', alpha=alpha_value, color=label_color)  # Adjust alpha and color for labels

# Create custom legend using proxy artists
#legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
#plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 4.png', dpi=600)

# Show plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Sort data by sizes
sorted_data = sorted(zip(labels, sizes, colors), key=lambda x: x[1], reverse=True)
labels, sizes, colors = zip(*sorted_data[:6])  # Select top 4 categories

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set alpha values for specific bars ('Family' and 'Adventure')
bars[-1].set_alpha(0.1)  # Index -1 corresponds to 'Family' in labels
bars[-2].set_alpha(0.05)  # Index -2 corresponds to 'Adventure' in labels

# Plotting markers with customized alpha
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    if label == 'Family' or label == 'Adventure':
        alpha_value = 0.15 if label == 'Family' else 0.05  # Set lower alpha for 'Family' and 'Adventure'
        label_color = 'white'  # Set label color to white
    else:
        alpha_value = 1.0  # Default alpha for other markers
        label_color = 'black'  # Default label color
    plt.plot(label, size, marker='o', markersize=25, color=color, alpha=alpha_value)  # Adjust alpha for markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage) with custom label color
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=12, weight='bold', alpha=alpha_value, color=label_color)  # Adjust alpha and color for labels

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Change the color of the x-axis line
plt.axhline(0, color='black', linewidth=2.5)

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 4.png', dpi=600)

# Show plot
plt.show()



import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you with varying transparency
colors = [("red", 1.0), ("green", 0.1), ("yellow", 0.2), ("blue", 1.0), ("black", 1.0), ("pink", 1.0)]

# Draw one bar per category with specified colors and transparencies
bars = ax.bar(angles[:-1], statistics[:-1], align='edge', linewidth=0, alpha=0.75)  # Default transparency

# Set the color and transparency for each bar individually
for i, (color, transparency) in enumerate(colors):
    bars[i].set_color(color)
    bars[i].set_alpha(transparency)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    if labels[i] == 'Romance':
        mid_angle = 45 - np.pi / 2  # Adjust angle for Romance label
    else:
        mid_angle = (angle + angles[i + 1]) / 2
    if labels[i] == 'Adventure' or labels[i] == 'Family':
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold', alpha=0.0)
    else:
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontsize=12, fontweight='bold')

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 60, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Polar Top 4.png', dpi=600)

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [20, 15, 10, 8, 8, 10, 15, 20, 25, 30, 25, 20, 15],
    'Adventure': [25, 30, 25, 20, 15, 12, 10, 8, 8, 10, 15, 20, 25],
    'Romance': [8, 10, 10, 8, 10, 8, 8, 10, 10, 5, 10, 10, 5],
    'Fantasy': [20, 15, 20, 25, 20, 15, 15, 10, 8, 5, 8, 12, 15],
    'Family': [15, 20, 20, 20, 20, 15, 15, 10, 10, 10, 10, 10, 10],
    'Horror': [12, 5, 2, 0, 2, 3, 5, 5, 7, 8, 9, 10, 10]
}

df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid

plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

# Set axis labels and adjust font properties
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold')
plt.ylabel('Top Genre Count', fontsize=12, fontweight='bold')

# Set spines color and width
plt.gca().spines['bottom'].set_color('black')  # Change bottom spine (x axis) color to black
plt.gca().spines['left'].set_color('black')  # Change left spine (y axis) color to black
#plt.gca().spines['bottom'].set_linewidth(2)  # Increase bottom spine (x axis) width
#plt.gca().spines['left'].set_linewidth(2)  # Increase left spine (y axis) width

plt.tight_layout()
plt.savefig('Movie 3.png', dpi=600)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [30, 25, 20, 15, 12, 10, 8, 8, 10, 15, 20, 25, 30],
    'Adventure': [15, 20, 25, 30, 25, 20, 15, 12, 10, 8, 8, 10, 15],
    'Romance': [5, 10, 10, 8, 10, 10, 8, 8, 10, 10, 5, 10, 10],
    'Fantasy': [25, 20, 15, 15, 10, 8, 5, 8, 12, 15, 20, 25, 20],
    'Family': [10, 10, 10, 10, 10, 15, 15, 20, 20, 20, 20, 15, 10],
    'Horror': [15, 15, 20, 22, 23, 27, 39, 37, 28, 22, 12, 5, 5]
}


df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Add line chart behind bars with the same color palette
#sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.5, legend=False)

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

#plt.xlabel('Timestamp')
#plt.ylabel('Count')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid
plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

# Set axis labels and adjust font properties
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold')
plt.ylabel('Top Genre Count', fontsize=12, fontweight='bold')

# Set spines color and width
plt.gca().spines['bottom'].set_color('black')  # Change bottom spine (x axis) color to black
plt.gca().spines['left'].set_color('black')  # Change left spine (y axis) color to black
#plt.gca().spines['bottom'].set_linewidth(2)  # Increase bottom spine (x axis) width
#plt.gca().spines['left'].set_linewidth(2)  # Increase left spine (y axis) width

plt.tight_layout()
plt.savefig('Movie 10.png', dpi=600)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [35, 30, 25, 20, 15, 12, 10, 8, 8, 10, 15, 20, 25],
    'Adventure': [15, 20, 25, 30, 25, 20, 15, 12, 10, 8, 8, 10, 15],
    'Romance': [5, 10, 10, 8, 10, 10, 8, 8, 10, 10, 5, 10, 10],
    'Fantasy': [20, 15, 20, 25, 20, 15, 15, 10, 8, 5, 8, 12, 15],
    'Family': [15, 10, 10, 10, 10, 15, 15, 20, 20, 20, 20, 15, 10],
    'Horror': [10, 10, 10, 10, 10, 10, 12, 14, 19, 25, 25, 18, 15]
}


df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Add line chart behind bars with the same color palette
#sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.5, legend=False)

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

#plt.xlabel('Timestamp')
#plt.ylabel('Count')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid

plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line

# Set axis labels and adjust font properties
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold')
plt.ylabel('Top Genre Count', fontsize=12, fontweight='bold')

# Set spines color and width
plt.gca().spines['bottom'].set_color('black')  # Change bottom spine (x axis) color to black
plt.gca().spines['left'].set_color('black')  # Change left spine (y axis) color to black
#plt.gca().spines['bottom'].set_linewidth(2)  # Increase bottom spine (x axis) width
#plt.gca().spines['left'].set_linewidth(2)  # Increase left spine (y axis) width

plt.tight_layout()
plt.savefig('Movie 21.png', dpi=600)
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 1),  # Green (60% brightness)
          (1, 1, 0, 1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=12, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Customize the plot
#ax.set_title('Pie Chart with Explode and Adjusted Brightness', fontweight='bold')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Full.png', dpi=300)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams


# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow", "blue", "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

ax.set_xlabel("Count", fontsize=12, fontweight='bold')  # Increase font size and make bold
ax.set_ylabel("Timestamp", fontsize=12, fontweight='bold')  # Increase font size and make bold

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Stacked All 6.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[0]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Action'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Show y-axis scale with labels
plt.yticks(range(0, 101, 20), [str(x) for x in range(0, 101, 20)])
plt.xticks(rotation=45)

# Remove x label and legend
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold')
plt.ylabel('Genre Count', fontsize=12, fontweight='bold')
plt.legend().set_visible(False)

# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_color('black')  # Change y-axis line color to black

# Change x-axis line color to black
ax.spines['bottom'].set_color('black')

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.savefig('Action Timeline View.png', dpi=600)
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 0.1),  # Red (40% brightness)
          (0, 1, 0, 0.1),  # Green (60% brightness)
          (1, 1, 0, 0.1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=12, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 3.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Sort data by sizes
sorted_data = sorted(zip(labels, sizes, colors), key=lambda x: x[1], reverse=True)
labels, sizes, colors = zip(*sorted_data[:6])  # Select top 4 categories

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set alpha values for specific bars ('Family' and 'Adventure')
bars[-1].set_alpha(0.1)  # Index -1 corresponds to 'Family' in labels
bars[-2].set_alpha(0.05)  # Index -2 corresponds to 'Adventure' in labels

# Plotting markers with customized alpha
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    if label == 'Family' or label == 'Adventure':
        alpha_value = 0.15 if label == 'Family' else 0.05  # Set lower alpha for 'Family' and 'Adventure'
        label_color = 'white'  # Set label color to white
    else:
        alpha_value = 1.0  # Default alpha for other markers
        label_color = 'black'  # Default label color
    plt.plot(label, size, marker='o', markersize=25, color=color, alpha=alpha_value)  # Adjust alpha for markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage) with custom label color
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=12, weight='bold', alpha=alpha_value, color=label_color)  # Adjust alpha and color for labels

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Change the color of the x-axis line
plt.axhline(0, color='black')

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 4.png', dpi=600)

# Show plot
plt.show()

import matplotlib.pyplot as plt

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
sizes = [5, 5, 5, 30, 10, 45]
explode = (0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  # Explode all segments equally
colors = [(1, 0, 0, 1),  # Red (40% brightness)
          (0, 1, 0, 0.1),  # Green (60% brightness)
          (1, 1, 0, 0.1),  # Yellow (full brightness)
          (0, 0, 1, 1),  # Blue (50% brightness)
          (0, 0, 0, 1),  # Black (70% brightness)
          (1, 0, 0, 0.3)]  # Pink (30% brightness)

# Plotting the pie chart with explode and adjusted brightness colors
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(sizes, labels=None, startangle=140, explode=explode, colors=colors,
                                  autopct='%1.1f%%', textprops=dict(color="black", fontsize=12, fontweight='bold'),
                                  pctdistance=1.10)  # Set the percentage text outside the pie chart

# Set the text color of non-Romance and non-Action segments to white
for text, autotext, label in zip(texts, autotexts, labels):
    if label not in ['Romance','Fantasy','Horror','Action']:
        text.set_color('white')
        autotext.set_color('white')

# Create legend using all labels and their corresponding colors
#plt.legend(wedges, labels, loc='upper right', bbox_to_anchor=(1.1, 1), title="Genres")

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
#plt.title('Pie Chart with Explode and Adjusted Brightness')

# Save the figure with 300 dpi resolution
plt.savefig('Pie Top 4.png', dpi=600)

plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data
labels = ['Action', 'Adventure', 'Family', 'Fantasy', 'Horror', 'Romance']
statistics = [5, 5, 5, 30, 10, 45]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()  # Create evenly spaced angles

# Making the plot circular
statistics += statistics[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'polar': True})
ax.set_theta_offset(np.pi / 2)  # Rotate the plot so it starts from the top
ax.set_theta_direction(-1)  # Clockwise

# Custom colors specified by you with varying transparency
colors = [("red", 1.0), ("green", 0.1), ("yellow", 0.2), ("blue", 1.0), ("black", 1.0), ("pink", 1.0)]

# Draw one bar per category with specified colors and transparencies
bars = ax.bar(angles[:-1], statistics[:-1], align='edge', linewidth=0, alpha=0.75)  # Default transparency

# Set the color and transparency for each bar individually
for i, (color, transparency) in enumerate(colors):
    bars[i].set_color(color)
    bars[i].set_alpha(transparency)

# Display statistics values slightly away from the midpoint of each polar bar
for i, (angle, stat) in enumerate(zip(angles[:-1], statistics[:-1])):
    if labels[i] == 'Romance':
        mid_angle = 45 - np.pi / 2  # Adjust angle for Romance label
    else:
        mid_angle = (angle + angles[i + 1]) / 2
    if labels[i] == 'Adventure' or labels[i] == 'Family':
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontweight='bold', alpha=0.0)
    else:
        ax.text(mid_angle, stat + 3, f'{stat}%', ha='center', va='bottom', fontsize=12, fontweight='bold')

# Hide genre labels around the chart
ax.set_xticks(np.linspace(0, 2 * np.pi, len(labels), endpoint=False))  # Set evenly spaced ticks
ax.set_xticklabels([])  # Hide tick labels

# Set grid lines and adjust them to cover the maximum data value
ax.set_yticks(np.arange(0, 60, 10))  # Adjust the outer limit to cover the maximum value
ax.set_yticklabels([])  # Hide y-axis labels
plt.yticks(color='black')

# Remove the outer circle (spine)
ax.spines['polar'].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Polar Top 4.png', dpi=600)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count",fontsize=12, fontweight='bold')
ax.set_ylabel("Timestamp",fontsize=12, fontweight='bold')

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 2.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count",fontsize=12, fontweight='bold')
ax.set_ylabel("Timestamp",fontsize=12, fontweight='bold')

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 3.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams

# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16]
}
'''data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25]
}'''

# Create a DataFrame from the data
df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["red", "green", "yellow",  "blue",  "black", "pink"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Set x-axis limit to 100
ax.set_xlim(0, 100)

ax.set_xlabel("Count",fontsize=12, fontweight='bold')
ax.set_ylabel("Timestamp",fontsize=12, fontweight='bold')

# Save the figure with 300 dpi resolution
plt.savefig('Stacked 4.png', dpi=600)


# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[1]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Adventure'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Show y-axis scale with labels
plt.yticks(range(0, 101, 20), [str(x) for x in range(0, 101, 20)])
plt.xticks(rotation=45)

# Remove x label and legend
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold')
plt.ylabel('Genre Count', fontsize=12, fontweight='bold')
plt.legend().set_visible(False)

# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_color('black')  # Change y-axis line color to black

# Change x-axis line color to black
ax.spines['bottom'].set_color('black')

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.savefig('Adventure Timeline View.png', dpi=600)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[3]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Fantasy'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Show y-axis scale with labels
plt.yticks(range(0, 101, 20), [str(x) for x in range(0, 101, 20)])
plt.xticks(rotation=45)

# Remove x label and legend
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold')
plt.ylabel('Genre Count', fontsize=12, fontweight='bold')
plt.legend().set_visible(False)

# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_color('black')  # Change y-axis line color to black

# Change x-axis line color to black
ax.spines['bottom'].set_color('black')

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.savefig('Fantasy Timeline View.png', dpi=600)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Manually specified "viridis" colors
viridis_colors = ["red", "green", "pink", "blue", "yellow", "black"]

# Create a stacked area chart using Seaborn
plt.figure(figsize=(10, 6))

# Stacked area chart with markers using the specified "viridis" colors
sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=viridis_colors, marker='o', linewidth=2.5)

# Bar chart for "Romance" inside the stacked area chart
action_color = viridis_colors[2]  # Get the color for Romance from the specified colors
sns.barplot(x='Timestemp', y='Count', data=df_long[df_long['Genre'] == 'Romance'], color=action_color, alpha=0.9, zorder=10)

# Set y-axis limits to show endpoint at 100
plt.ylim(0, 100)

# Show y-axis scale with labels
plt.yticks(range(0, 101, 20), [str(x) for x in range(0, 101, 20)])
plt.xticks(rotation=45)

# Remove x label and legend
plt.xlabel('Trailer Timestamp', fontsize=12, fontweight='bold', color='black')
plt.ylabel('Genre Count', fontsize=12, fontweight='bold', color='black')
plt.legend().set_visible(False)


# Remove left, right, and top border lines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_color('black')  # Change y-axis line color to black

# Change x-axis line color to black
ax.spines['bottom'].set_color('black')

# Remove background grid lines
plt.grid(False)

# Adjust the spacing between the line graph and bar graph
plt.subplots_adjust(bottom=0.15)

plt.tight_layout()
plt.savefig('Romance Timeline View.png', dpi=600)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams


# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Action": [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["pink", "red", "green", "yellow", "blue", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

ax.set_xlabel("Count", fontsize=12, fontweight='bold')  # Increase font size and make bold
ax.set_ylabel("Timestamp", fontsize=12, fontweight='bold')  # Increase font size and make bold

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Romance Stacked All 6.png', dpi=600)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams


# Create a dictionary from the provided data
data = {
    "Timestamp": ["0-10", "11-20", "21-30", "31-40", "41-50", "51-60", "61-70", "71-80", "81-90", "91-100", "101-120", "121-130", "131-140"],
    "Romance": [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    "Adventure": [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    "Family": [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    "Fantasy": [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    "Horror": [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
      }

rcParams['font.weight'] = 'bold'
rcParams['font.size'] = 12

# Create a DataFrame from the data
df = pd.DataFrame(data)

# Set the Timestamp column as the index
df.set_index("Timestamp", inplace=True)

# Define the colors for each genre
colors = ["pink", "green", "yellow", "blue", "black"]

# Create a horizontal stacked bar plot with custom colors and no gridlines
sns.set(style="white")
ax = df.plot(kind="barh", stacked=True, figsize=(10, 8), color=colors)

# Remove legend
ax.legend().set_visible(False)

# Remove gridlines
ax.grid(False)

ax.set_xlabel("Count", fontsize=12, fontweight='bold')  # Increase font size and make bold
ax.set_ylabel("Timestamp", fontsize=12, fontweight='bold')  # Increase font size and make bold

# Remove top and right spines
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)

# Save the figure with 300 dpi resolution
plt.savefig('Romance A F F H Stacked.png', dpi=600)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Data
labels = ['Romance', 'Fantasy', 'Horror', 'Action', 'Adventure', 'Family']
sizes = [45, 30, 10, 5, 5, 5]
colors = ['pink', 'blue', 'black', 'red', 'green', 'yellow']

# Sort data by sizes
sorted_data = sorted(zip(labels, sizes, colors), key=lambda x: x[1], reverse=True)
labels, sizes, colors = zip(*sorted_data[:6])  # Select top 4 categories

# Plotting the lollipop chart with bars and markers
plt.figure(figsize=(10, 6))

# Plotting bars with reduced width
bars = plt.bar(labels, sizes, color=colors, width=0.05, align='center', alpha=0.5, label='Sizes')

# Set alpha values for specific bars ('Family' and 'Adventure')
bars[-1].set_alpha(0.1)  # Index -1 corresponds to 'Family' in labels
#bars[-2].set_alpha(0.05)  # Index -2 corresponds to 'Adventure' in labels

# Plotting markers with customized alpha
for idx, (label, size, color) in enumerate(zip(labels, sizes, colors)):
    if label == 'Family':
    #if label == 'Family':
        alpha_value = 0.15  # Set lower alpha for 'Family' and 'Adventure'
        label_color = 'white'  # Set label color to white
    #elif label == 'Adventure':
    #if label == 'Family':
        #alpha_value = 0.05  # Set lower alpha for 'Family' and 'Adventure'
        #label_color = 'white'  # Set label color to white
    else:
        alpha_value = 1.0  # Default alpha for other markers
        label_color = 'black'  # Default label color
    plt.plot(label, size, marker='o', markersize=25, color=color, alpha=alpha_value)  # Adjust alpha for markers

    # Match marker color with bar color
    bars[idx].set_color(color)

    # Add text above the marker (size value as percentage) with custom label color
    plt.text(label, size + 2, f'{size}%', ha='center', va='bottom', fontsize=12, weight='bold', alpha=alpha_value, color=label_color)  # Adjust alpha and color for labels

# Create custom legend using proxy artists
#legend_elements = [Line2D([0], [0], marker='o', color='w', label=label, markersize=10, markerfacecolor=color) for label, color in zip(labels, colors)]
#plt.legend(handles=legend_elements, loc='upper right')

# Customize the plot
plt.xticks([])  # Remove x-axis tick labels
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)  # Hide left spine
plt.yticks([])  # Remove y-axis scale values

# Change the color of the x-axis line
plt.axhline(0, color='black')

# Save the figure with 300 dpi resolution
plt.savefig('Lolipop Top 5.png', dpi=600)

# Show plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data
data = {
    'Timestemp': ['0-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', '81-90', '91-100', '101-120', '121-130', '131-140'],
    'Action': [38, 5, 1, 22, 3, 14, 10, 26, 21, 23, 16, 18, 25],
    'Adventure': [19, 16, 1, 26, 39, 13, 23, 5, 24, 5, 12, 12, 4],
    'Romance': [17, 7, 22, 9, 3, 21, 6, 14, 16, 9, 2, 24, 25],
    'Fantasy': [11, 12, 17, 8, 26, 15, 33, 15, 3, 26, 16, 7, 16],
    'Family': [5, 10, 59, 21, 12, 18, 8, 23, 31, 12, 44, 8, 10],
    'Horror': [10, 50, 0, 14, 17, 19, 20, 17, 5, 25, 10, 31, 20]
}

df = pd.DataFrame(data)

# Set the style
sns.set(style="whitegrid")

# Melt the data to long format
df_long = pd.melt(df, id_vars=['Timestemp'], var_name='Genre', value_name='Count')

# Create a custom color palette using the specified color pattern
color_palette = {'Action': 'red', 'Adventure': 'green', 'Family': 'yellow', 'Fantasy': 'blue', 'Horror': 'black', 'Romance': 'pink'}

# Create a figure and axis
plt.figure(figsize=(10, 6))

# Add line chart behind bars with the same color palette
#sns.lineplot(x='Timestemp', y='Count', data=df_long, hue='Genre', palette=color_palette, marker='o', linewidth=2.5, alpha=0.5, legend=False)

# Loop through each timestamp and plot the bar chart for the genre with the highest count
for timestamp in df_long['Timestemp'].unique():
    genre_counts = df_long[df_long['Timestemp'] == timestamp]
    max_genre = genre_counts.loc[genre_counts['Count'].idxmax(), 'Genre']
    max_count = genre_counts['Count'].max()
    plt.bar(timestamp, max_count, color=color_palette[max_genre], label=max_genre, alpha=0.8, width=0.5)

plt.xlabel('Trailer Timestamp',fontsize=12, fontweight='bold')
plt.ylabel('Top Genre Count',fontsize=12, fontweight='bold')

# Set y-axis scale to 100
plt.ylim(0, 100)

plt.xticks(rotation=45)
plt.grid(False)  # Remove background grid
plt.gca().spines['top'].set_visible(False)  # Remove top outer line
plt.gca().spines['right'].set_visible(False)  # Remove left outer line
plt.gca().spines['left'].set_color('black')
plt.gca().spines['bottom'].set_color('black')

plt.tight_layout()

# Save the figure with 300 dpi resolution
plt.savefig('Summery Timeline Top.png', dpi=600)

plt.show()